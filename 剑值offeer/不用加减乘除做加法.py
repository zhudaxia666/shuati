'''
写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
/step1:按位与是查看两个数哪些二进制位都为1，这些都是进位位，结果需左移一位，表示进位后的结果
//step2:异或是查看两个数哪些二进制位只有一个为1，这些是非进位位，可以直接加、减，结果表示非进位位进行加操作后的结果
//step3:n1&n2是查看有没有进位位了，如果有，需要重复step1、step2；如果没有，保留n1、n2上二进制为1的部分，用或将之合为一个数，即为最后结果

首先看十进制是如何做的： 5+7=12，

可以使用三步走：

第一步：相加各位的值，不算进位，得到2。

第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。

第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。 同样我们可以

三步走的方式计算二进制值相加： 5-101，7-111

第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。

第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。

第三步：重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。

继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。
'''
# -*- coding:utf-8 -*-
class Solution:
    def Add(self, num1, num2):
        # write code here
        m=0x7fffffff#int最大整数即01111111（32个1）
        mask=0xffffffff#-1即11111（32个1）
        while num2!=0:
            num1,num2=(num1 ^ num2),((num1 & num2) << 1)
            num1 &=mask
            num2 &=mask
        return num1 if num1<=m else ~(num1 ^ mask) #~n = -(n+1)